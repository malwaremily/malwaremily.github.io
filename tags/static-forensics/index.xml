<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>static forensics on malwaremily</title><link>https://www.malwaremily.github.io/tags/static-forensics/</link><description>Recent content in static forensics on malwaremily</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 20 Jan 2021 00:00:03 +0000</lastBuildDate><atom:link href="https://www.malwaremily.github.io/tags/static-forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing my first forensic tool in Go</title><link>https://www.malwaremily.github.io/001-penut/</link><pubDate>Wed, 20 Jan 2021 00:00:03 +0000</pubDate><guid>https://www.malwaremily.github.io/001-penut/</guid><description>Overview While reading Hands On System Programming with Go, I discovered the debug/pe package. To learn more about using Go I decided to spend a few days building a static forensic tool centered around use of this package. The debug/pe package provides functions that make analyzing a PE file easier. A glimpse of promising functions include: Open, ImportedLibraries, FileHeader, OpentionHeader32/64, and StringTable. Limiting myself to a span of a week, I&amp;rsquo;m reporting on functions I&amp;rsquo;ve applied to penut, a simple PE file static analysis tool, and what the next steps are to build upon the application.</description></item></channel></rss>