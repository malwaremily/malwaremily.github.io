<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on malwaremily</title>
    <link>https://malwaremily.com/tags/go/</link>
    <description>Recent content in Go on malwaremily</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 25 Jan 2021 00:00:03 +0000</lastBuildDate><atom:link href="https://malwaremily.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HoneyTraps in the Cloud 101</title>
      <link>https://malwaremily.com/posts/005-honeypots-cloud/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:03 +0000</pubDate>
      
      <guid>https://malwaremily.com/posts/005-honeypots-cloud/</guid>
      <description>Updated 2021-03-01: Give the reader a heads up that restarting SSH will kick them from their current session.
Overview Honeypots are useful tools for collecting unauthorized interactions as logs. These logs can be digested to identify new attacking techniques or observe active username/password patterns. In the context of a security team, it could provide actionable information to pre-emptively secure the studied environment.
This tutorial will discuss general SSH honeypot pre-configuration, HoneyTrap installation, logging, and analysis.</description>
    </item>
    
    <item>
      <title>Writing my first forensic tool in Go</title>
      <link>https://malwaremily.com/posts/001-penut/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:03 +0000</pubDate>
      
      <guid>https://malwaremily.com/posts/001-penut/</guid>
      <description>Overview While reading Hands On System Programming with Go, I discovered the debug/pe package. To learn more about using Go I decided to spend a few days building a static forensic tool centered around use of this package. The debug/pe package provides functions that make analyzing a PE file easier. A glimpse of promising functions include: Open, ImportedLibraries, FileHeader, OpentionHeader32/64, and StringTable. Limiting myself to a span of a week, I&amp;rsquo;m reporting on functions I&amp;rsquo;ve applied to penut, a simple PE file static analysis tool, and what the next steps are to build upon the application.</description>
    </item>
    
  </channel>
</rss>
